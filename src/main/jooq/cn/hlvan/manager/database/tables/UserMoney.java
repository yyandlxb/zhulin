/*
 * This file is generated by jOOQ.
*/
package cn.hlvan.manager.database.tables;


import cn.hlvan.manager.database.Indexes;
import cn.hlvan.manager.database.Keys;
import cn.hlvan.manager.database.Zhulin;
import cn.hlvan.manager.database.tables.records.UserMoneyRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMoney extends TableImpl<UserMoneyRecord> {

    private static final long serialVersionUID = 1333906205;

    /**
     * The reference instance of <code>zhulin.user_money</code>
     */
    public static final UserMoney USER_MONEY = new UserMoney();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserMoneyRecord> getRecordType() {
        return UserMoneyRecord.class;
    }

    /**
     * The column <code>zhulin.user_money.id</code>. 用户余额表
     */
    public final TableField<UserMoneyRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "用户余额表");

    /**
     * The column <code>zhulin.user_money.money</code>. 余额
     */
    public final TableField<UserMoneyRecord, BigDecimal> MONEY = createField("money", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "余额");

    /**
     * The column <code>zhulin.user_money.user_id</code>. 用户Id
     */
    public final TableField<UserMoneyRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户Id");

    /**
     * The column <code>zhulin.user_money.created_at</code>.
     */
    public final TableField<UserMoneyRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>zhulin.user_money.updated_at</code>.
     */
    public final TableField<UserMoneyRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>zhulin.user_money</code> table reference
     */
    public UserMoney() {
        this(DSL.name("user_money"), null);
    }

    /**
     * Create an aliased <code>zhulin.user_money</code> table reference
     */
    public UserMoney(String alias) {
        this(DSL.name(alias), USER_MONEY);
    }

    /**
     * Create an aliased <code>zhulin.user_money</code> table reference
     */
    public UserMoney(Name alias) {
        this(alias, USER_MONEY);
    }

    private UserMoney(Name alias, Table<UserMoneyRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserMoney(Name alias, Table<UserMoneyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Zhulin.ZHULIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_MONEY_NEWINDEX1, Indexes.USER_MONEY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserMoneyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_MONEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserMoneyRecord> getPrimaryKey() {
        return Keys.KEY_USER_MONEY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserMoneyRecord>> getKeys() {
        return Arrays.<UniqueKey<UserMoneyRecord>>asList(Keys.KEY_USER_MONEY_PRIMARY, Keys.KEY_USER_MONEY_NEWINDEX1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserMoney as(String alias) {
        return new UserMoney(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserMoney as(Name alias) {
        return new UserMoney(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMoney rename(String name) {
        return new UserMoney(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMoney rename(Name name) {
        return new UserMoney(name, null);
    }
}
