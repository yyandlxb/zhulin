/*
 * This file is generated by jOOQ.
*/
package cn.hlvan.manager.database.tables;


import cn.hlvan.manager.database.Indexes;
import cn.hlvan.manager.database.Keys;
import cn.hlvan.manager.database.Zhulin;
import cn.hlvan.manager.database.tables.records.PictureRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Picture extends TableImpl<PictureRecord> {

    private static final long serialVersionUID = 551369341;

    /**
     * The reference instance of <code>zhulin.picture</code>
     */
    public static final Picture PICTURE = new Picture();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PictureRecord> getRecordType() {
        return PictureRecord.class;
    }

    /**
     * The column <code>zhulin.picture.id</code>.
     */
    public final TableField<PictureRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>zhulin.picture.picture_pixel</code>. 图片像素
     */
    public final TableField<PictureRecord, String> PICTURE_PIXEL = createField("picture_pixel", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "图片像素");

    /**
     * The column <code>zhulin.picture.picture_name</code>. 图片名称
     */
    public final TableField<PictureRecord, String> PICTURE_NAME = createField("picture_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "图片名称");

    /**
     * The column <code>zhulin.picture.order_eassy_id</code>. 文章id
     */
    public final TableField<PictureRecord, Integer> ORDER_EASSY_ID = createField("order_eassy_id", org.jooq.impl.SQLDataType.INTEGER, this, "文章id");

    /**
     * The column <code>zhulin.picture.notes</code>. 备注
     */
    public final TableField<PictureRecord, String> NOTES = createField("notes", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "备注");

    /**
     * The column <code>zhulin.picture.created_at</code>.
     */
    public final TableField<PictureRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>zhulin.picture.updated_at</code>.
     */
    public final TableField<PictureRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>zhulin.picture</code> table reference
     */
    public Picture() {
        this(DSL.name("picture"), null);
    }

    /**
     * Create an aliased <code>zhulin.picture</code> table reference
     */
    public Picture(String alias) {
        this(DSL.name(alias), PICTURE);
    }

    /**
     * Create an aliased <code>zhulin.picture</code> table reference
     */
    public Picture(Name alias) {
        this(alias, PICTURE);
    }

    private Picture(Name alias, Table<PictureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Picture(Name alias, Table<PictureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Zhulin.ZHULIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PICTURE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PictureRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PICTURE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PictureRecord> getPrimaryKey() {
        return Keys.KEY_PICTURE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PictureRecord>> getKeys() {
        return Arrays.<UniqueKey<PictureRecord>>asList(Keys.KEY_PICTURE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Picture as(String alias) {
        return new Picture(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Picture as(Name alias) {
        return new Picture(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Picture rename(String name) {
        return new Picture(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Picture rename(Name name) {
        return new Picture(name, null);
    }
}
