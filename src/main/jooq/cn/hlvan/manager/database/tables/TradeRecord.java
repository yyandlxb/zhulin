/*
 * This file is generated by jOOQ.
*/
package cn.hlvan.manager.database.tables;


import cn.hlvan.manager.database.Indexes;
import cn.hlvan.manager.database.Keys;
import cn.hlvan.manager.database.Zhulin;
import cn.hlvan.manager.database.tables.records.TradeRecordRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TradeRecord extends TableImpl<TradeRecordRecord> {

    private static final long serialVersionUID = 728158094;

    /**
     * The reference instance of <code>zhulin.trade_record</code>
     */
    public static final TradeRecord TRADE_RECORD = new TradeRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TradeRecordRecord> getRecordType() {
        return TradeRecordRecord.class;
    }

    /**
     * The column <code>zhulin.trade_record.id</code>.
     */
    public final TableField<TradeRecordRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>zhulin.trade_record.user_id</code>. 用户订单号id
     */
    public final TableField<TradeRecordRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户订单号id");

    /**
     * The column <code>zhulin.trade_record.trade_info</code>. 交易信息
     */
    public final TableField<TradeRecordRecord, String> TRADE_INFO = createField("trade_info", org.jooq.impl.SQLDataType.VARCHAR(50), this, "交易信息");

    /**
     * The column <code>zhulin.trade_record.money</code>. 商家价格
     */
    public final TableField<TradeRecordRecord, BigDecimal> MONEY = createField("money", org.jooq.impl.SQLDataType.DECIMAL(10, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "商家价格");

    /**
     * The column <code>zhulin.trade_record.created_at</code>.
     */
    public final TableField<TradeRecordRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>zhulin.trade_record.trade_code</code>. 交易相关码
     */
    public final TableField<TradeRecordRecord, String> TRADE_CODE = createField("trade_code", org.jooq.impl.SQLDataType.VARCHAR(100), this, "交易相关码");

    /**
     * Create a <code>zhulin.trade_record</code> table reference
     */
    public TradeRecord() {
        this(DSL.name("trade_record"), null);
    }

    /**
     * Create an aliased <code>zhulin.trade_record</code> table reference
     */
    public TradeRecord(String alias) {
        this(DSL.name(alias), TRADE_RECORD);
    }

    /**
     * Create an aliased <code>zhulin.trade_record</code> table reference
     */
    public TradeRecord(Name alias) {
        this(alias, TRADE_RECORD);
    }

    private TradeRecord(Name alias, Table<TradeRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private TradeRecord(Name alias, Table<TradeRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Zhulin.ZHULIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRADE_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TradeRecordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRADE_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TradeRecordRecord> getPrimaryKey() {
        return Keys.KEY_TRADE_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TradeRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<TradeRecordRecord>>asList(Keys.KEY_TRADE_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TradeRecord as(String alias) {
        return new TradeRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TradeRecord as(Name alias) {
        return new TradeRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TradeRecord rename(String name) {
        return new TradeRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TradeRecord rename(Name name) {
        return new TradeRecord(name, null);
    }
}
